#include<iostream> 
using namespace std; 
 
#define N 52 
class Deque 
{ 
	int arr[52]; 
	int front; 
	int rear; 
	int size; 
public : 
	Deque(int size) 
	{ 
		front = -1; 
		rear = 0; 
		this->size = size; 
	} 
 
	void insertfront(int data); 
	void insertrear(int data); 
	void drawFront(); 
	void drawRear(); 
	bool isFull(); 
	bool isEmpty(); 
	int peekFront(); 
	int peekRear(); 
}; 

bool Deque::isFull() 
{ 
	return ((front == 0 && rear == size-1)|| 
			front == rear+1); 
} 
 
bool Deque::isEmpty () 
{ 
	return (front == -1); 
} 
 
void Deque::insertfront(int data) 
{  
	if (isFull()) 
	{ 
		cout << "Overflow\n" ; 
		return; 
	}  
	if (front == -1) 
	{ 
		front = 0; 
		rear = 0; 
	} 
	else if (front == 0) 
		front = size - 1 ; 

	else  
		front = front-1; 

	arr[front] = data ; 
} 

void Deque ::insertrear(int data) 
{ 
	if (isFull()) 
	{ 
		cout << " Overflow\n " ; 
		return; 
	} 
 
	if (front == -1) 
	{ 
		front = 0; 
		rear = 0; 
	} 
 
	else if (rear == size-1) 
		rear = 0; 

	else
		rear = rear+1; 
 
	arr[rear] = data ; 
} 
 
void Deque ::drawFront() 
{  
	if (isEmpty()) 
	{ 
		cout << "Queue Underflow\n" ; 
		return ; 
	} 
 
	if (front == rear) 
	{ 
		front = -1; 
		rear = -1; 
	} 
	else 
		if (front == size -1) 
			front = 0; 

		else 
			front = front+1; 
} 
 
void Deque::drawRear() 
{ 
	if (isEmpty()) 
	{ 
		cout << " Underflow\n" ; 
		return ; 
	} 
 
	if (front == rear) 
	{ 
		front = -1; 
		rear = -1; 
	} 
	else if (rear == 0) 
		rear = size-1; 
	else
		rear = rear-1; 
} 
 
int Deque::peekFront() 
{  
	if (isEmpty()) 
	{ 
		cout << " Underflow\n" ; 
		return -1 ; 
	} 
	return arr[front]; 
} 
 
int Deque::peekRear() 
{  
	if(isEmpty() || rear < 0) 
	{ 
		cout << " Underflow\n" ; 
		return -1 ; 
	} 
	return arr[rear]; 
} 
 
int main() 
{ 
	int n,b,i;
	cin >> n;
	cin >> b;
	char inp[N][b];
	for(i=0;i<b;i++){
		cin >> inp[N][i]; 
	} 
	return 0; 
} 
