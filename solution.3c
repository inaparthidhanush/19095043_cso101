#include<bits/stdc++.h>
using namespace std;


struct node
{
char list[80];
struct node* link;
};
struct node *startNP=NULL;
struct node *startP=NULL;


int ch()
{
	char a[]="ADD";
	char b[]="DEL";
	char c[]="DISPLAY";
	char str[20];
	cin>>str;

	int r1=strcmp(a,str);
	int r2=strcmp(b,str);
	int r3=strcmp(c,str);
	if(r1==0)
	return 1;
	else if(r2==0)
	return 2;
	else if(r3==0)
	return 3;
}


void ADD()
{   
    char a[20];
    char str[]="NP";
    struct node* n=(struct node*)malloc(sizeof(struct node));
     n->link=NULL;
     cin>>n->list>>a;
     int numebr= strcmp(a,str);
    if(numebr==0)
    {

       if(startNP==NULL)
       {
        startNP=n;
       }
       else
       {
           struct node *p;
           p=startNP;
           while(p->link!=NULL)
           {
               p=p->link;
           }
           p->link=n;

       }
    }
    else if(numebr>0)
    {
     if(startP==NULL)
       {
        startP=n;
       }
       else
       {
           struct node *p;
           p=startP;
           while(p->link!=NULL)
           {
               p=p->link;
           }
           p->link=n;

       }
    }
}


int DEL()
{    if(startP==NULL)
        return 1;
    else
    {
      while(startP!=NULL)
      {
      struct node* t;
      t=startP;
      startP=t->link;
      t->link=NULL;
     }
    }
}


void DISPLAY()
{

      struct node *t1,*t2;
       t1=startNP;
       t2=startP;
       if(startNP!=NULL)
       {
	        while(t1!=NULL)
            {
            cout<<t1->list<<'\t';
            t1=t1->link;

            }
    }
     if(startP!=NULL)
        {
	        while(t2!=NULL)
        {
            cout<<t2->list<<'\t';
            t2=t2->link;
        }
        }
}


int main()
{   
    int m=0;
	int a,b;
	int len;
	cin>>a>>b;
	while(m!=b)
    {

		switch(ch())
		{
			case 1: ADD();
                    break;
            case 2: DEL();
                    break;
            case 3: DISPLAY();
                    cout<<endl;
                    break;
            default: exit(1);
		}
		m++;
	}
}


